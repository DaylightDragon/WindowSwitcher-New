# CMakeList.txt: проект CMake для WindowSwitcherNew; включите исходный код и определения,
# укажите здесь логику для конкретного проекта.

cmake_minimum_required (VERSION 3.8)

set(CMAKE_CXX_STANDARD 11)

#if (MSVC_VERSION GREATER_EQUAL "1900")
#    include(CheckCXXCompilerFlag)
#    CHECK_CXX_COMPILER_FLAG("/std:c++latest" _cpp_latest_flag_supported)
#    if (_cpp_latest_flag_supported)
#        add_compile_options("/std:c++latest")
#    endif()
#endif()

project ("WindowSwitcherNew")

#set(YAML_BUILD_SHARED_LIBS ON)

# Set the path to the "yaml-cpp" library source directory
set(YAML_CPP_DIR ${CMAKE_SOURCE_DIR}/libraries/yaml-cpp-0.8.0)
# Add the "yaml-cpp" library as a subdirectory
add_subdirectory(${YAML_CPP_DIR})
# Include the "yaml-cpp" headers
include_directories(${YAML_CPP_DIR}/include)


# Specify the .cpp file for which a header file is required
#set(SOURCE_FILE "ConfigOperations.cpp")
# Extract only the file name without extension
#get_filename_component(SOURCE_FILE_NAME ${SOURCE_FILE} NAME_WE)
# Generate the header file name
#set(HEADER_FILE_NAME "${SOURCE_FILE_NAME}.h")
# Generate the header file path
#set(HEADER_FILE_PATH "${CMAKE_CURRENT_BINARY_DIR}/${HEADER_FILE_NAME}")
# Add a custom command to generate the header file from the .cpp file
#add_custom_command(
#    OUTPUT ${HEADER_FILE_PATH}
#    COMMAND echo "#pragma once" > ${HEADER_FILE_PATH}
#    DEPENDS ${SOURCE_FILE}
#    COMMENT "Generating ${HEADER_FILE_NAME}"
#)
# Add the generated header file as an additional source file
#set(ADDITIONAL_SOURCE_FILES ${ADDITIONAL_SOURCE_FILES} ${HEADER_FILE_PATH} PARENT_SCOPE)

# Добавьте источник в исполняемый файл этого проекта.
add_executable (WindowSwitcherNew "WindowSwitcherNew.cpp" "WindowSwitcherNew.h"  "ConfigOperations.cpp" "ConfigOperations.h" "GeneralUtils.cpp" "GeneralUtils.h" "KeySequence.cpp" "KeySequence.h") #  "libraries/yaml-cpp-0.8.0/include/yaml-cpp/anchor.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/binary.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/depthguard.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/dll.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/emitfromevents.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/emitter.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/emitterdef.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/emittermanip.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/emitterstyle.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/eventhandler.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/exceptions.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/mark.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/noexcept.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/null.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/ostream_wrapper.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/parser.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/stlemitter.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/traits.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/yaml.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/contrib/anchordict.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/contrib/graphbuilder.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/convert.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/emit.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/impl.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/iterator.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/node.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/parse.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/ptr.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/type.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/detail/impl.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/detail/iterator.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/detail/iterator_fwd.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/detail/memory.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/detail/node.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/detail/node_data.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/detail/node_iterator.h" "libraries/yaml-cpp-0.8.0/include/yaml-cpp/node/detail/node_ref.h" "libraries/yaml-cpp-0.8.0/src/binary.cpp" "libraries/yaml-cpp-0.8.0/src/collectionstack.h" "libraries/yaml-cpp-0.8.0/src/convert.cpp" "libraries/yaml-cpp-0.8.0/src/depthguard.cpp" "libraries/yaml-cpp-0.8.0/src/directives.cpp" "libraries/yaml-cpp-0.8.0/src/directives.h" "libraries/yaml-cpp-0.8.0/src/emit.cpp" "libraries/yaml-cpp-0.8.0/src/emitfromevents.cpp" "libraries/yaml-cpp-0.8.0/src/emitter.cpp" "libraries/yaml-cpp-0.8.0/src/emitterstate.cpp" "libraries/yaml-cpp-0.8.0/src/emitterstate.h" "libraries/yaml-cpp-0.8.0/src/emitterutils.cpp" "libraries/yaml-cpp-0.8.0/src/emitterutils.h" "libraries/yaml-cpp-0.8.0/src/exceptions.cpp" "libraries/yaml-cpp-0.8.0/src/exp.cpp" "libraries/yaml-cpp-0.8.0/src/exp.h" "libraries/yaml-cpp-0.8.0/src/indentation.h" "libraries/yaml-cpp-0.8.0/src/memory.cpp" "libraries/yaml-cpp-0.8.0/src/node.cpp" "libraries/yaml-cpp-0.8.0/src/nodebuilder.cpp" "libraries/yaml-cpp-0.8.0/src/nodebuilder.h" "libraries/yaml-cpp-0.8.0/src/nodeevents.cpp" "libraries/yaml-cpp-0.8.0/src/nodeevents.h" "libraries/yaml-cpp-0.8.0/src/node_data.cpp" "libraries/yaml-cpp-0.8.0/src/null.cpp" "libraries/yaml-cpp-0.8.0/src/ostream_wrapper.cpp" "libraries/yaml-cpp-0.8.0/src/parse.cpp" "libraries/yaml-cpp-0.8.0/src/parser.cpp" "libraries/yaml-cpp-0.8.0/src/ptr_vector.h" "libraries/yaml-cpp-0.8.0/src/regeximpl.h" "libraries/yaml-cpp-0.8.0/src/regex_yaml.cpp" "libraries/yaml-cpp-0.8.0/src/regex_yaml.h" "libraries/yaml-cpp-0.8.0/src/scanner.cpp" "libraries/yaml-cpp-0.8.0/src/scanner.h" "libraries/yaml-cpp-0.8.0/src/scanscalar.cpp" "libraries/yaml-cpp-0.8.0/src/scanscalar.h" "libraries/yaml-cpp-0.8.0/src/scantag.cpp" "libraries/yaml-cpp-0.8.0/src/scantag.h" "libraries/yaml-cpp-0.8.0/src/scantoken.cpp" "libraries/yaml-cpp-0.8.0/src/setting.h" "libraries/yaml-cpp-0.8.0/src/simplekey.cpp" "libraries/yaml-cpp-0.8.0/src/singledocparser.cpp" "libraries/yaml-cpp-0.8.0/src/singledocparser.h" "libraries/yaml-cpp-0.8.0/src/stream.cpp" "libraries/yaml-cpp-0.8.0/src/stream.h" "libraries/yaml-cpp-0.8.0/src/streamcharsource.h" "libraries/yaml-cpp-0.8.0/src/stringsource.h" "libraries/yaml-cpp-0.8.0/src/tag.cpp" "libraries/yaml-cpp-0.8.0/src/tag.h" "libraries/yaml-cpp-0.8.0/src/token.h" "libraries/yaml-cpp-0.8.0/src/contrib/graphbuilder.cpp" "libraries/yaml-cpp-0.8.0/src/contrib/graphbuilderadapter.cpp" "libraries/yaml-cpp-0.8.0/src/contrib/graphbuilderadapter.h" "libraries/yaml-cpp-0.8.0/test/binary_test.cpp" "libraries/yaml-cpp-0.8.0/test/handler_test.h" "libraries/yaml-cpp-0.8.0/test/main.cpp" "libraries/yaml-cpp-0.8.0/test/mock_event_handler.h" "libraries/yaml-cpp-0.8.0/test/ostream_wrapper_test.cpp" "libraries/yaml-cpp-0.8.0/test/parser_test.cpp" "libraries/yaml-cpp-0.8.0/test/regex_test.cpp" "libraries/yaml-cpp-0.8.0/test/specexamples.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/gmock-actions.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/gmock-cardinalities.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/gmock-function-mocker.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/gmock-matchers.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/gmock-more-actions.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/gmock-more-matchers.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/gmock-nice-strict.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/gmock-spec-builders.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/gmock.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/internal/gmock-internal-utils.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/internal/gmock-port.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/internal/gmock-pp.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/internal/custom/gmock-generated-actions.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/internal/custom/gmock-matchers.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/include/gmock/internal/custom/gmock-port.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googlemock/test/gmock_link_test.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/gtest-death-test.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/gtest-matchers.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/gtest-message.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/gtest-param-test.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/gtest-printers.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/gtest-spi.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/gtest-test-part.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/gtest-typed-test.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/gtest.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/gtest_pred_impl.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/gtest_prod.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/internal/gtest-death-test-internal.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/internal/gtest-filepath.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/internal/gtest-internal.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/internal/gtest-param-util.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/internal/gtest-port-arch.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/internal/gtest-port.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/internal/gtest-string.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/internal/gtest-type-util.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/internal/custom/gtest-port.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/internal/custom/gtest-printers.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/include/gtest/internal/custom/gtest.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/samples/prime_tables.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/samples/sample1.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/samples/sample2.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/samples/sample3-inl.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/samples/sample4.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/src/gtest-internal-inl.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/test/googletest-param-test-test.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/test/gtest-typed-test_test.h" "libraries/yaml-cpp-0.8.0/test/gtest-1.11.0/googletest/test/production.h" "libraries/yaml-cpp-0.8.0/test/integration/emitter_test.cpp" "libraries/yaml-cpp-0.8.0/test/integration/encoding_test.cpp" "libraries/yaml-cpp-0.8.0/test/integration/error_messages_test.cpp" "libraries/yaml-cpp-0.8.0/test/integration/gen_emitter_test.cpp" "libraries/yaml-cpp-0.8.0/test/integration/handler_spec_test.cpp" "libraries/yaml-cpp-0.8.0/test/integration/handler_test.cpp" "libraries/yaml-cpp-0.8.0/test/integration/load_node_test.cpp" "libraries/yaml-cpp-0.8.0/test/integration/node_spec_test.cpp" "libraries/yaml-cpp-0.8.0/test/node/node_test.cpp" "libraries/yaml-cpp-0.8.0/util/api.cpp" "libraries/yaml-cpp-0.8.0/util/parse.cpp" "libraries/yaml-cpp-0.8.0/util/read.cpp" "libraries/yaml-cpp-0.8.0/util/sandbox.cpp"
# Link the "yaml-cpp" library to your executable
target_link_libraries(WindowSwitcherNew yaml-cpp)

# Add the generated header file as an additional source file to your target
#target_sources(WindowSwitcherNew PRIVATE ${ADDITIONAL_SOURCE_FILES})

# TODO: Добавьте тесты и целевые объекты, если это необходимо.
